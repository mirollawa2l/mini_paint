/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Frontend;

import Backend.Circle;
import Backend.Draw;
import Backend.DrawingEngineII;
import Backend.LineSegment;
import Backend.Rectangle;
import Backend.Shape;
import Backend.Square;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import static java.lang.String.valueOf;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author mirol
 */
public class MainWindow extends javax.swing.JFrame {

    private DefaultComboBoxModel<String> chooseShapeModel;
    public DrawingEngineII engine = new DrawingEngineII();
    public Draw canvas;

    public MainWindow() {
        initComponents();
        this.setLocation(250, 300);
        setTitle("Vector Drawing Application");
/////
        chooseShapeModel = new DefaultComboBoxModel<>();
        chooseShapeModel.addElement("Choose Shape");
        chooseShape.setModel(chooseShapeModel);
        ///
        canvas = new Draw(engine);
        canvas.setBackground(Color.WHITE);
        canvas.setBorder(javax.swing.BorderFactory.createBevelBorder(
                javax.swing.border.BevelBorder.RAISED, Color.BLACK, Color.BLACK, null, Color.BLACK));
        getContentPane().add(canvas);
        setLayout(null);
        canvas.setBounds(180, 50, 450, 200);
        add(canvas);
        revalidate();
        repaint();

        ////
    }

    private void updateComboBoxItems() {
        chooseShapeModel.removeAllElements();
        chooseShapeModel.addElement("Choose Shape");

        for (Shape shape : engine.getShapes()) {
            chooseShapeModel.addElement(shape.getId());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooseShape = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        Circle = new javax.swing.JButton();
        Line = new javax.swing.JButton();
        Square = new javax.swing.JButton();
        Rectangle = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Colorize = new javax.swing.JButton();
        Resize = new javax.swing.JButton();
        Move = new javax.swing.JButton();
        Save = new javax.swing.JButton();
        Load = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        chooseShape.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        chooseShape.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseShapeActionPerformed(evt);
            }
        });

        jLabel1.setText("Select Shape");

        Circle.setText("Circle");
        Circle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CircleActionPerformed(evt);
            }
        });

        Line.setText("Line Segment");
        Line.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LineActionPerformed(evt);
            }
        });

        Square.setText("Square");
        Square.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SquareActionPerformed(evt);
            }
        });

        Rectangle.setText("Rectangle");
        Rectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RectangleActionPerformed(evt);
            }
        });

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        Colorize.setText("Colorize");
        Colorize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColorizeActionPerformed(evt);
            }
        });

        Resize.setText("Resize");
        Resize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResizeActionPerformed(evt);
            }
        });

        Move.setText("Move");
        Move.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveActionPerformed(evt);
            }
        });

        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        Load.setText("Load");
        Load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Save)
                        .addGap(18, 18, 18)
                        .addComponent(Load, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Circle)
                        .addGap(41, 41, 41)
                        .addComponent(Line)
                        .addGap(39, 39, 39)
                        .addComponent(Square)
                        .addGap(30, 30, 30)
                        .addComponent(Rectangle)
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chooseShape, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Colorize)
                                    .addComponent(Resize, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Move, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap(472, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Line)
                            .addComponent(Square)
                            .addComponent(Rectangle)
                            .addComponent(Circle)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Save)
                            .addComponent(Load))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chooseShape, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Delete)
                    .addComponent(Colorize))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Resize)
                    .addComponent(Move))
                .addGap(47, 47, 47))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooseShapeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseShapeActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_chooseShapeActionPerformed

    private void CircleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CircleActionPerformed
        // TODO add your handling code here:
        CircleWindow w = new CircleWindow(this, true);
        w.setVisible(true);

        Circle c = new Circle();
        Point p = new Point(w.getX(), w.getY());
        c.setPosition(p);
        Map<String, Double> m = new HashMap<>();
        m.put("radius", w.getRadius());
        c.setProperties(m);
        double r = c.getProperties().get("radius");
        engine.addShape(c);
        updateComboBoxItems();

    canvas.repaint(); 
    engine.refresh(canvas.getGraphics());
    }//GEN-LAST:event_CircleActionPerformed

    private void LineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LineActionPerformed
        // TODO add your handling code here:
        LineSegmentWindow w = new LineSegmentWindow(this, true);
        w.setVisible(true);
        LineSegment l = new LineSegment();
        Point p1 = new Point(w.getX1(), w.getY1());
        Map<String, Double> m = new HashMap<>();
        m.put("Xend", w.getX2());
        m.put("Yend", w.getY2());
        l.setProperties(m);

        l.setPosition(p1);
        l.setColor(Color.BLACK);
        engine.addShape(l);
        updateComboBoxItems();
        
            canvas.repaint(); 
    engine.refresh(canvas.getGraphics());

    }//GEN-LAST:event_LineActionPerformed

    private void SquareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SquareActionPerformed
        // TODO add your handling code here:
        SquareWindow w = new SquareWindow(this, true);
        w.setVisible(true);
        Square s = new Square();
        Point p = new Point(w.getX(), w.getY());
        s.setPosition(p);
        Map<String, Double> m = new HashMap<>();
        m.put("side", w.getSide());
        s.setProperties(m);
        s.setColor(Color.BLACK);
        engine.addShape(s);
        updateComboBoxItems();
        
                canvas.repaint(); 
    engine.refresh(canvas.getGraphics());
    }//GEN-LAST:event_SquareActionPerformed

    private void RectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RectangleActionPerformed
        // TODO add your handling code here:
        RectangleWindow w = new RectangleWindow(this, true);
        w.setVisible(true);
        Rectangle r = new Rectangle();
        Point p = new Point(w.getX(), w.getY());
        r.setPosition(p);
        Map<String, Double> m = new HashMap<>();
        m.put("width", w.getLength());
        m.put("length", w.getW());
        r.setProperties(m);
        r.setColor(Color.BLACK);
        engine.addShape(r);
        r.draw(canvas.getGraphics());
        updateComboBoxItems();
        canvas.repaint(); 
        engine.refresh(canvas.getGraphics());

    }//GEN-LAST:event_RectangleActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
        String id = (String) chooseShape.getSelectedItem();

        if (id.equals("Choose Shape")) {
            JOptionPane.showMessageDialog(this, "Please select a shape first.");
        } else {
            Shape shape2delete = engine.getShape(id);
            if (shape2delete != null) {
                engine.getShapes().remove(shape2delete);
                engine.getMap().remove(shape2delete);
                updateComboBoxItems();
                canvas.repaint();
                engine.refresh(canvas.getGraphics());
            }
        }

    }//GEN-LAST:event_DeleteActionPerformed

    private void ColorizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColorizeActionPerformed
        // TODO add your handling code here:

        String id = (String) chooseShape.getSelectedItem();

        if (id.equals("Choose Shape")) {
            JOptionPane.showMessageDialog(this, "Please select a shape first.");
        } else {
            ColorizeWindow w = new ColorizeWindow(this, true);
            w.setVisible(true);
            Color color = w.getColor();
            Shape shape2colorize = engine.getShape(id);

            if (shape2colorize != null) {
                shape2colorize.setFillColor(color);
                shape2colorize.colorize(canvas.getGraphics());
                canvas.repaint();
                engine.refresh(canvas.getGraphics());
            }
        }

    }//GEN-LAST:event_ColorizeActionPerformed

    private void ResizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResizeActionPerformed
        // TODO add your handling code here:
        String id = (String) chooseShape.getSelectedItem();

        if (id.equals("Choose Shape")) {

            JOptionPane.showMessageDialog(this, "Please select a shape first.");
        } else {
            Shape shape = engine.getShape(id);
            if (shape instanceof Circle) {
                ResizeCircleWindow w = new ResizeCircleWindow(this, true);
                w.setVisible(true);
                Map<String, Double> m = new HashMap<>();
                m.put("radius", w.getRadius());
                shape.setProperties(m);
                canvas.repaint();
                engine.refresh(canvas.getGraphics());
            } else if (shape instanceof Square) {
                ResizeSquareWindow w = new ResizeSquareWindow(this, true);
                w.setVisible(true);
                Map<String, Double> m = new HashMap<>();
                m.put("side", w.getSide());
                shape.setProperties(m);
                canvas.repaint();
                engine.refresh(canvas.getGraphics());
            } else if (shape instanceof LineSegment) {
                ResizeLineSegmentWindow w = new ResizeLineSegmentWindow(this, true);
                w.setVisible(true);
                Map<String, Double> m = new HashMap<>();
                m.put("Xend", w.getX2());
                m.put("Yend", w.getY2());
                shape.setProperties(m);
                canvas.repaint();
                engine.refresh(canvas.getGraphics());
            } else if (shape instanceof Rectangle) {
                ResizeRectangleWindow w = new ResizeRectangleWindow(this, true);
                w.setVisible(true);
                Map<String, Double> m = new HashMap<>();
                m.put("length", w.getW());
                m.put("width", w.getLength());
                shape.setProperties(m);
                canvas.repaint();
                engine.refresh(canvas.getGraphics());
            } else {
                JOptionPane.showMessageDialog(this, "Please select a shape first.");
            }
        }
    }//GEN-LAST:event_ResizeActionPerformed

    private void MoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveActionPerformed
        // TODO add your handling code here:

        String id = (String) chooseShape.getSelectedItem();

        if (id.equals("Choose Shape")) {
            JOptionPane.showMessageDialog(this, "Please select a shape first.");
        } else {
            MoveWindow w = new MoveWindow(this, true);
            w.setVisible(true);
            Shape shape = engine.getShape(id);
            Point p = new Point(w.getXnew(), w.getYnew());
            shape.setPosition(p);
            canvas.repaint();
            engine.refresh(canvas.getGraphics());
        }
    }//GEN-LAST:event_MoveActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        // TODO add your handling code here:
///////////////open file 

        // Open a JFileChooser to select save location
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save Shapes");

        // Set default file extension filter
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("PNG Images", "png"));

        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();

            // Ensure the file has a .png extension
            if (!fileToSave.getName().toLowerCase().endsWith(".png")) {
                fileToSave = new File(fileToSave.getAbsolutePath() + ".png");
            }
//////////////Capture the image
            // Create a BufferedImage from the paint area
            BufferedImage image = new BufferedImage(canvas.getWidth(), canvas.getHeight(), BufferedImage.TYPE_INT_ARGB);
            Graphics2D g2d = image.createGraphics();
            canvas.paint(g2d); // Paint the content of the JPanel onto the BufferedImage
            g2d.dispose();

            // Save the BufferedImage to the selected file
            try {
                ImageIO.write(image, "png", fileToSave);
                JOptionPane.showMessageDialog(this, "Shapes saved successfully!");
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error saving image: " + ex.getMessage());
            }
            
///////////////save to textfile

String Line = new String();

for(Shape s:engine.getShapes())
{
     BufferedWriter writer = null;
                try {
                     Line+=s.getId()+" ";
                     Line+=s.getPosition().x+" "+s.getPosition().y+" ";
                    if(s instanceof Circle)
                    {
                     Line+=s.getProperties().get("radius")+" ";
                    }
                    else if(s instanceof Rectangle)
                    {
                       Line+=s.getProperties().get("length")+" "; 
                        Line+=s.getProperties().get("width")+" ";  
                    }
                    else if(s instanceof Square)
                    {
                         Line+=s.getProperties().get("side")+" ";  
                    }
                    else if(s instanceof LineSegment)
                    {
                         Line+=s.getProperties().get("Xend")+" ";  
                           Line+=+s.getProperties().get("Yend")+" ";  
                    }   
                    Line+=valueOf(s.getColor())+" ";
                    Line+=valueOf(s.getFillColor())+"\n";
                    writer = new BufferedWriter(new FileWriter("shapes.txt", false));
                    writer.write(Line);
                } catch (IOException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    try {
                        writer.close();
                    } catch (IOException ex) {
                        Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
}

        }
    }//GEN-LAST:event_SaveActionPerformed

    private void LoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadActionPerformed
        BufferedReader reader= null;
        try {
            // TODO add your handling code here:
            reader = new BufferedReader(new FileReader("shapes.txt"));
            String line=reader.readLine();
            while(line!=null)
            {
                 System.out.println("in loop");
                  System.out.println(line);
                String data[]=line.split(" ");
                String id=data[0];
                 Point p=new Point(Integer.parseInt(data[1]),Integer.parseInt(data[2]));
                    Map<String,Double> m=new HashMap<>();
       
                if(id.charAt(0)=='C')
                {
                    
                    Circle c=new Circle();
                
                    c.setId(id);
                    c.setPosition(p);
               
                   m.put("radius", Double.parseDouble(data[3]));
                  
                   c.setProperties(m);
                  
                   Color color = parseColorFromString(data[4]);
                  
                   c.setColor(color);
                 
                   Color fillColor=parseColorFromString(data[5]);
                   
               c.setFillColor(fillColor);
            
               engine.getShapes().add(c);
               engine.getMap().put(c, id);
                } else if(id.charAt(0)=='S'){
                   Square s=new Square();
                
                    s.setId(id);
                    s.setPosition(p);
               
                   m.put("side", Double.parseDouble(data[3]));
                  
                   s.setProperties(m);
                  
                   Color color = parseColorFromString(data[4]);
                  
                   s.setColor(color);
                 
                   Color fillColor=parseColorFromString(data[5]);
                   
               s.setFillColor(fillColor);
            
               engine.getShapes().add(s);
               engine.getMap().put(s, id);   
                }
                else if(id.charAt(0)=='R')
                {
                       Rectangle r=new Rectangle();
                
                    r.setId(id);
                    r.setPosition(p);
               
                   m.put("length", Double.parseDouble(data[3]));
                    m.put("width", Double.parseDouble(data[4]));
                  
                   r.setProperties(m);
                  
                   Color color = parseColorFromString(data[5]);
                  
                   r.setColor(color);
                 
                   Color fillColor=parseColorFromString(data[6]);
                   
               r.setFillColor(fillColor);
            
               engine.getShapes().add(r);
               engine.getMap().put(r, id);
                }
                else if(id.charAt(0)=='L')
                {
                       LineSegment l=new LineSegment();
                
                    l.setId(id);
                    l.setPosition(p);
               
                   m.put("Xend", Double.parseDouble(data[3]));
                    m.put("Yend", Double.parseDouble(data[4]));
                  
                   l.setProperties(m);
                    System.out.println(data[5]);
                   Color color = parseColorFromString(data[5]);
                  
                   l.setColor(color);
                 
                   Color fillColor=parseColorFromString(data[6]);
                   
               l.setFillColor(fillColor);
            
               engine.getShapes().add(l);
               engine.getMap().put(l, id);
                }
                line=reader.readLine();
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                reader.close();
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
                
        }
        updateComboBoxItems();
              canvas.repaint();
            engine.refresh(canvas.getGraphics());
    }//GEN-LAST:event_LoadActionPerformed

    
   private Color parseColorFromString(String colorString) {
        // Remove the "java.awt.Color" prefix and brackets
           System.out.println(colorString);
        String rgbPart = colorString.substring(colorString.indexOf("[") + 1, colorString.indexOf("]"));
           System.out.println(rgbPart);
        // Split the string to extract r, g, and b values
        String[] parts = rgbPart.split(",");
        int r = Integer.parseInt(parts[0].split("=")[1].trim());
        int g = Integer.parseInt(parts[1].split("=")[1].trim());
        int b = Integer.parseInt(parts[2].split("=")[1].trim());

        // Create a Color object using the extracted RGB values
        return new Color(r, g, b);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               
                 new MainWindow().setVisible(true);
                
                
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Circle;
    private javax.swing.JButton Colorize;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Line;
    private javax.swing.JButton Load;
    private javax.swing.JButton Move;
    private javax.swing.JButton Rectangle;
    private javax.swing.JButton Resize;
    private javax.swing.JButton Save;
    private javax.swing.JButton Square;
    private javax.swing.JComboBox<String> chooseShape;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
